import{_ as e,c as l,o as r,ag as i}from"./chunks/framework.DixDqOXi.js";const _=JSON.parse('{"title":"前端性能优化实践","description":"","frontmatter":{},"headers":[],"relativePath":"blog/performance.md","filePath":"blog/performance.md","lastUpdated":1739779266000}'),t={name:"blog/performance.md"};function o(n,a,h,s,d,c){return r(),l("div",null,a[0]||(a[0]=[i('<h1 id="前端性能优化实践" tabindex="-1">前端性能优化实践 <a class="header-anchor" href="#前端性能优化实践" aria-label="Permalink to &quot;前端性能优化实践&quot;">​</a></h1><h2 id="项目背景" tabindex="-1">项目背景 <a class="header-anchor" href="#项目背景" aria-label="Permalink to &quot;项目背景&quot;">​</a></h2><p>在最近的 SaaS 平台项目中，我们面临着首屏加载慢的问题。通过一系列优化，我们将加载时间从 3s 降低到了 1.5s。</p><h2 id="优化策略" tabindex="-1">优化策略 <a class="header-anchor" href="#优化策略" aria-label="Permalink to &quot;优化策略&quot;">​</a></h2><h3 id="_1-代码分割" tabindex="-1">1. 代码分割 <a class="header-anchor" href="#_1-代码分割" aria-label="Permalink to &quot;1. 代码分割&quot;">​</a></h3><ul><li>使用动态 import 实现路由懒加载</li><li>将第三方库单独打包</li></ul><h3 id="_2-资源优化" tabindex="-1">2. 资源优化 <a class="header-anchor" href="#_2-资源优化" aria-label="Permalink to &quot;2. 资源优化&quot;">​</a></h3><ul><li>图片懒加载</li><li>使用 WebP 格式</li><li>CDN 加速</li></ul><h3 id="_3-缓存策略" tabindex="-1">3. 缓存策略 <a class="header-anchor" href="#_3-缓存策略" aria-label="Permalink to &quot;3. 缓存策略&quot;">​</a></h3><ul><li>合理使用浏览器缓存</li><li>Service Worker 离线缓存</li></ul><h2 id="效果分析" tabindex="-1">效果分析 <a class="header-anchor" href="#效果分析" aria-label="Permalink to &quot;效果分析&quot;">​</a></h2><ul><li>首屏加载时间：3s → 1.5s</li><li>页面资源体积：2.5MB → 1.2MB</li><li>用户体验显著提升</li></ul>',12)]))}const m=e(t,[["render",o]]);export{_ as __pageData,m as default};
